import os
import json
from datetime import datetime
from vibetrack.diff_utils import get_current_branch, get_recent_commits

def save_markdown(diff, explanation, old_file, new_file, analysis_type="diff", extra_data=None):
    """Save analysis to markdown file with comprehensive report"""
    # Create history directory if it doesn't exist
    history_dir = "history"
    if not os.path.exists(history_dir):
        os.makedirs(history_dir)
    
    # Generate filename with timestamp and type
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"{history_dir}/vibetrack_{analysis_type}_{timestamp}.md"
    
    # Get additional context
    current_branch = get_current_branch()
    recent_commits = get_recent_commits(3)
    
    # Create comprehensive markdown content
    markdown_content = f"""# 🎯 VibeTrack Analysis Report

## 📊 Report Information
- **Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- **Analysis Type:** {analysis_type.title()}
- **Comparison:** {old_file} → {new_file}
- **Current Branch:** {current_branch}

## 📋 Repository Context
### Recent Commits
```
{recent_commits if recent_commits else "No recent commits found"}
```

## 🔍 Changes Detected

```diff
{diff}
```

## 🧠 AI Analysis

{explanation}
"""

    # Add extra data if provided (for commit message analysis, etc.)
    if extra_data:
        if 'commit_message' in extra_data:
            markdown_content += f"""

## 📝 Commit Message Analysis
### Original Message
```
{extra_data['commit_message']}
```

### Consistency Check
{extra_data.get('consistency_analysis', 'No consistency analysis available')}
"""

        if 'suggested_message' in extra_data:
            markdown_content += f"""

### 💡 Suggested Improvement
```
{extra_data['suggested_message']}
```
"""

        if 'file_stats' in extra_data:
            markdown_content += f"""

## 📈 File Statistics
{extra_data['file_stats']}
"""

    # Add metadata section
    markdown_content += f"""

## 🔧 Technical Details
- **Files Changed:** {len([line for line in diff.split('\n') if line.startswith('diff --git')])}
- **Report Size:** {len(diff.split('\n'))} lines of diff
- **Analysis Length:** {len(explanation.split())} words

## 📱 Export Options
This report is available in:
- ✅ Markdown format (current)
- 📄 JSON format (use --export-json flag)
- 🌐 HTML format (use --export-html flag)

---
*Generated by VibeTrack v0.1.0 - دستیار شخصی برای Vibe Coders*
*GitHub: https://github.com/alireza-taheriF/vibetrack*
"""
    
    # Write to file
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(markdown_content)
    
    return filename

def save_json_report(diff, explanation, old_file, new_file, analysis_type="diff", extra_data=None):
    """Save analysis to JSON file for programmatic access"""
    history_dir = "history"
    if not os.path.exists(history_dir):
        os.makedirs(history_dir)
    
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"{history_dir}/vibetrack_{analysis_type}_{timestamp}.json"
    
    # Create JSON structure
    report_data = {
        "metadata": {
            "generated": datetime.now().isoformat(),
            "analysis_type": analysis_type,
            "old_file": old_file,
            "new_file": new_file,
            "current_branch": get_current_branch(),
            "vibetrack_version": "0.1.0"
        },
        "analysis": {
            "diff": diff,
            "explanation": explanation,
            "diff_stats": {
                "lines_changed": len(diff.split('\n')),
                "files_changed": len([line for line in diff.split('\n') if line.startswith('diff --git')]),
                "analysis_words": len(explanation.split())
            }
        },
        "context": {
            "recent_commits": get_recent_commits(5)
        }
    }
    
    # Add extra data
    if extra_data:
        report_data["extra_data"] = extra_data
    
    # Write JSON file
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    return filename

def save_html_report(diff, explanation, old_file, new_file, analysis_type="diff", extra_data=None):
    """Save analysis to HTML file for web viewing"""
    history_dir = "history"
    if not os.path.exists(history_dir):
        os.makedirs(history_dir)
    
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = f"{history_dir}/vibetrack_{analysis_type}_{timestamp}.html"
    
    # Create HTML content
    html_content = f"""<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VibeTrack Analysis Report</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        .header {{
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        .content {{
            padding: 30px;
        }}
        .section {{
            margin-bottom: 30px;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #4facfe;
            background: #f8f9fa;
        }}
        .diff-container {{
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 20px;
            border-radius: 10px;
            overflow-x: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
        }}
        .analysis {{
            background: #fff3cd;
            border-left-color: #ffc107;
        }}
        .metadata {{
            background: #d1ecf1;
            border-left-color: #17a2b8;
        }}
        h1, h2, h3 {{ color: #333; }}
        .emoji {{ font-size: 1.2em; }}
        .footer {{
            text-align: center;
            padding: 20px;
            background: #f8f9fa;
            color: #666;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><span class="emoji">🎯</span> VibeTrack Analysis Report</h1>
            <p>دستیار شخصی برای Vibe Coders</p>
        </div>
        
        <div class="content">
            <div class="section metadata">
                <h2><span class="emoji">📊</span> اطلاعات گزارش</h2>
                <ul>
                    <li><strong>تاریخ تولید:</strong> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</li>
                    <li><strong>نوع تحلیل:</strong> {analysis_type.title()}</li>
                    <li><strong>مقایسه:</strong> {old_file} → {new_file}</li>
                    <li><strong>Branch فعلی:</strong> {get_current_branch()}</li>
                </ul>
            </div>
            
            <div class="section">
                <h2><span class="emoji">🔍</span> تغییرات شناسایی شده</h2>
                <div class="diff-container">
                    <pre>{diff}</pre>
                </div>
            </div>
            
            <div class="section analysis">
                <h2><span class="emoji">🧠</span> تحلیل هوش مصنوعی</h2>
                <div style="white-space: pre-wrap;">{explanation}</div>
            </div>
            
            {"<div class='section'><h2><span class='emoji'>📝</span> تحلیل پیام کامیت</h2><pre>" + extra_data.get('commit_message', '') + "</pre></div>" if extra_data and 'commit_message' in extra_data else ""}
        </div>
        
        <div class="footer">
            <p>Generated by VibeTrack v0.1.0 | <a href="https://github.com/alireza-taheriF/vibetrack">GitHub</a></p>
        </div>
    </div>
</body>
</html>"""
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return filename